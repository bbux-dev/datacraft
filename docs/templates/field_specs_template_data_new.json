{
  "examples": {
    "overview_example_one": {
      "json": "{\n  \"combine\": {\n    \"type\": \"combine\",\n    \"refs\": [\n      \"ONE\",\n      \"TWO\"\n    ]\n  },\n  \"refs\": {}\n}",
      "yaml": "combine:\n  type: combine\n  refs:\n  - ONE\n  - TWO\nrefs:\n  ONE:\n    type: values\n    data:\n    - A\n    - B\n    - C\n  TWO:\n    type: values\n    data:\n    - 1\n    - 2\n    - 3",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nrefs = spec_builder.refs()\none = refs.values('ONE', [\"A\", \"B\", \"C\"])\ntwo = refs.values('TWO', [1, 2, 3])\n\nspec_builder.combine('combine', refs=[one, two])\n\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 7",
      "output": "A1\nB2\nC3\nA1\nB2\nC3\nA1"
    },
    "overview_example_two": {
      "json": "{\n  \"combine\": {\n    \"type\": \"combine\",\n    \"refs\": [\n      \"ONE\",\n      \"TWO\"\n    ]\n  },\n  \"refs\": {}\n}",
      "yaml": "combine:\n  type: combine\n  refs:\n  - ONE\n  - TWO\nrefs:\n  ONE:\n    type: values\n    data:\n    - A\n    - B\n    - C\n  TWO:\n    type: values\n    data:\n    - 1\n    - 2\n    - 3\n    - 4",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nrefs = spec_builder.refs()\none = refs.values('ONE', [\"A\", \"B\", \"C\"])\ntwo = refs.values('TWO', [1, 2, 3, 4])\n\nspec_builder.combine('combine', refs=[one, two])\n\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 12",
      "output": "A1\nB2\nC3\nA4\nB1\nC2\nA3\nB4\nC1\nA2\nB3\nC4"
    },
    "overview_example_three": {
      "json": "{\n  \"combine\": {\n    \"type\": \"combine\",\n    \"refs\": [\n      \"ONE\",\n      \"TWO\"\n    ]\n  },\n  \"refs\": {}\n}",
      "yaml": "combine:\n  type: combine\n  refs:\n  - ONE\n  - TWO\nrefs:\n  ONE:\n    type: values\n    data:\n    - A\n    - B\n    - C\n    config:\n      sample: true\n  TWO:\n    type: values\n    data:\n    - 1\n    - 2\n    - 3\n    - 4\n    config:\n      sample: 'yes'",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nrefs = spec_builder.refs()\none = refs.values('ONE', [\"A\", \"B\", \"C\"], sample=True)\ntwo = refs.values('TWO', [1, 2, 3, 4], sample=\"yes\")\n\nspec_builder.combine('combine', refs=[one, two])\n\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "B4\nB4\nA3\nA4\nB1"
    },
    "values_shorthand_one": {
      "json": "{\n  \"field1\": {\n    \"type\": \"values\",\n    \"data\": [1, 2, 3, 4, 5]\n  },\n  \"field2\": {\n    \"type\": \"values\",\n    \"data\": {\"A\": 0.5, \"B\": 0.3, \"C\": 0.2}\n  },\n  \"field3\": {\n    \"type\": \"values\",\n    \"data\": \"CONSTANT\"\n  }\n}",
      "yaml": "field1:\n  type: values\n  data:\n  - 1\n  - 2\n  - 3\n  - 4\n  - 5\nfield2:\n  type: values\n  data:\n    A: 0.5\n    B: 0.3\n    C: 0.2\nfield3:\n  type: values\n  data: CONSTANT",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.add_field('field1', dataspec.builder.values([1, 2, 3, 4, 5]))\nspec_builder.add_field('field2', dataspec.builder.values({\"A\": 0.5, \"B\": 0.3, \"C\": 0.2}))\nspec_builder.add_field('field3', dataspec.builder.values(\"CONSTANT\"))\n\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "1\nB\nCONSTANT\n2\nC\nCONSTANT\n3\nB\nCONSTANT\n4\nA\nCONSTANT\n5\nA\nCONSTANT"
    },
    "values_shorthand_two": {
      "json": "{\n  \"field1\": [1, 2, 3, 4, 5],\n  \"field2\": {},\n  \"field3\": \"CONSTANT\"\n}",
      "yaml": "field1:\n- 1\n- 2\n- 3\n- 4\n- 5\nfield2:\n  A: 0.5\n  B: 0.3\n  C: 0.2\nfield3: CONSTANT",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.add_field('field1', [1, 2, 3, 4, 5])\nspec_builder.add_field('field2', {\"A\": 0.5, \"B\": 0.3, \"C\": 0.2})\nspec_builder.add_field('field3', \"CONSTANT\")\n\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "1\nB\nCONSTANT\n2\nB\nCONSTANT\n3\nA\nCONSTANT\n4\nA\nCONSTANT\n5\nA\nCONSTANT"
    },
    "inline_key_example": {
      "json": "{\n  \"network:ipv4?cidr=192.168.0.0/16\": {}\n}",
      "yaml": "network:ipv4?cidr=192.168.0.0/16: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.add_field(\"network:ipv4?cidr=192.168.0.0/16\", {})\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"network:ipv4?cidr=192.168.0.0/16\": {}}' --log-level error -i 5",
      "output": "192.168.146.249\n192.168.120.84\n192.168.50.39\n192.168.237.35\n192.168.104.210"
    },
    "config_example_one": {
      "json": "{\n  \"ONE\": {\n    \"type\": \"values\",\n    \"data\": [1, 2, 3],\n    \"config\": {\n      \"prefix\": \"TEST\",\n      \"suffix\": \"@DEMO\"\n    }\n  },\n  \"TWO?prefix=TEST&suffix=@DEMO\": {\n    \"type\": \"values\",\n    \"data\": [1, 2, 3]\n  }\n}",
      "yaml": "ONE:\n  type: values\n  data:\n  - 1\n  - 2\n  - 3\n  config:\n    prefix: TEST\n    suffix: '@DEMO'\nTWO?prefix=TEST&suffix=@DEMO:\n  type: values\n  data:\n  - 1\n  - 2\n  - 3",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.values('ONE', [1, 2, 3], prefix='TEST', suffix='@DEMO')\nspec_builder.values('TWO?prefix=TEST&suffix=@DEMO', [1, 2, 3])\n\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "TEST1@DEMO\nTEST1@DEMO\nTEST2@DEMO\nTEST2@DEMO\nTEST3@DEMO\nTEST3@DEMO\nTEST1@DEMO\nTEST1@DEMO\nTEST2@DEMO\nTEST2@DEMO"
    },
    "common_config_example_one": {
      "json": "{\n  \"field\": {\n    \"type\": \"values\",\n    \"data\": [\"world\", \"beautiful\", \"destiny\"],\n    \"config\": {\n      \"prefix\": \"hello \"\n    }\n  }\n}",
      "yaml": "field:\n  type: values\n  data:\n  - world\n  - beautiful\n  - destiny\n  config:\n    prefix: 'hello '",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.values('field', \n                    [\"world\", \"beautiful\", \"destiny\"], \n                    prefix='hello ')\n\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "hello world\nhello beautiful\nhello destiny\nhello world\nhello beautiful"
    },
    "constants_example_one": {
      "json": "{\n  \"constant1\": {\n    \"type\": \"values\",\n    \"data\": 42\n  },\n  \"shorthand_constant\": \"This is simulated data and should not be used for nefarious purposes\"\n}",
      "yaml": "constant1:\n  type: values\n  data: 42\nshorthand_constant: This is simulated data and should not be used for nefarious purposes",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.values('constant1', 42)\nspec_builder.add_field('shorthand_constant', \"This is simulated data and should not be used for nefarious purposes\")\n\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "42\nThis is simulated data and should not be used for nefarious purposes\n42\nThis is simulated data and should not be used for nefarious purposes\n42\nThis is simulated data and should not be used for nefarious purposes\n42\nThis is simulated data and should not be used for nefarious purposes\n42\nThis is simulated data and should not be used for nefarious purposes"
    },
    "list_values_example_one": {
      "json": "{\n  \"list1\": {\n    \"type\": \"values\",\n    \"data\": [200, 202, 303, 400, 404, 500]\n  },\n  \"shorthand_list\": [200, 202, 303, 400, 404, 500],\n  \"random_pet?sample=true\": [\"dog\", \"cat\", \"bunny\", \"pig\", \"rhino\", \"hedgehog\"]\n}",
      "yaml": "list1:\n  type: values\n  data:\n  - 200\n  - 202\n  - 303\n  - 400\n  - 404\n  - 500\nshorthand_list:\n- 200\n- 202\n- 303\n- 400\n- 404\n- 500\nrandom_pet?sample=true:\n- dog\n- cat\n- bunny\n- pig\n- rhino\n- hedgehog",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.values('list1', [200, 202, 303, 400, 404, 500])\nspec_builder.add_field(\"shorthand_list\",  [200, 202, 303, 400, 404, 500])\nspec_builder.add_field(\"random_pet?sample=true\", [\"dog\", \"cat\", \"bunny\", \"pig\", \"rhino\", \"hedgehog\"])\n\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "200\n200\ncat\n202\n202\nhedgehog\n303\n303\nbunny\n400\n400\nhedgehog\n404\n404\ndog"
    },
    "weighted_values_example_one": {
      "json": "{\n  \"weighted1\": {\n    \"type\": \"values\",\n    \"data\": {\"200\": 0.4, \"202\": 0.3, \"303\": 0.1, \"400\": 0.05, \"403\": 0.05, \"404\": 0.05, \"500\": 0.05}\n  },\n  \"shorthand_weighted\": {}\n}",
      "yaml": "weighted1:\n  type: values\n  data:\n    '200': 0.4\n    '202': 0.3\n    '303': 0.1\n    '400': 0.05\n    '403': 0.05\n    '404': 0.05\n    '500': 0.05\nshorthand_weighted:\n  '200': 0.4\n  '202': 0.3\n  '303': 0.1\n  '400': 0.05\n  '403': 0.05\n  '404': 0.05\n  '500': 0.05",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.values('weighted1', {\n    \"200\": 0.4, \"202\": 0.3, \"303\": 0.1,\n    \"400\": 0.05, \"403\": 0.05, \"404\": 0.05, \"500\": 0.05\n})\nspec_builder.add_field(\"shorthand_weighted\", {\n    \"200\": 0.4, \"202\": 0.3, \"303\": 0.1,\n    \"400\": 0.05, \"403\": 0.05, \"404\": 0.05, \"500\": 0.05\n})\n\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "202\n200\n500\n200\n200\n303\n200\n202\n200\n202"
    },
    "sample_mode_example_one": {
      "json": "{\n  \"combine\": {\n    \"type\": \"combine\",\n    \"refs\": [\n      \"ONE\",\n      \"TWO\"\n    ]\n  },\n  \"refs\": {}\n}",
      "yaml": "combine:\n  type: combine\n  refs:\n  - ONE\n  - TWO\nrefs:\n  ONE?sample=true:\n  - A\n  - B\n  - C\n  TWO?sample=true:\n  - 1\n  - 2\n  - 3\n  - 4",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nrefs = spec_builder.refs()\nrefs.add_field('ONE?sample=true', [\"A\", \"B\", \"C\"])\nrefs.add_field('TWO?sample=true', [1, 2, 3, 4])\n\nspec_builder.combine('combine', refs=['ONE', 'TWO'])\n\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": ""
    },
    "combine_spec_example_one": {
      "json": "{\n  \"combine\": {\n    \"type\": \"combine\",\n    \"config\": {\n      \"join_with\": \" \"\n    },\n    \"refs\": [\n      \"first\",\n      \"last\"\n    ]\n  },\n  \"refs\": {}\n}",
      "yaml": "combine:\n  type: combine\n  refs:\n  - first\n  - last\n  config:\n    join_with: ' '\nrefs:\n  first:\n    type: values\n    data:\n    - zebra\n    - hedgehog\n    - llama\n    - flamingo\n  last:\n    type: values\n    data:\n    - jones\n    - smith\n    - williams",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nrefs = spec_builder.refs()\nfirst = refs.values(key=\"first\",\n                    data=[\"zebra\", \"hedgehog\", \"llama\", \"flamingo\"])\nlast = refs.values(key=\"last\",\n                   data=[\"jones\", \"smith\", \"williams\"])\n\nspec_builder.combine('combine', refs=[first, last], join_with=\" \")\n\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "zebra jones\nhedgehog smith\nllama williams\nflamingo jones\nzebra smith"
    },
    "combine_list_spec_example_one": {
      "json": "{\n  \"full_name\": {\n    \"type\": \"combine-list\",\n    \"config\": {\n      \"join_with\": \" \"\n    },\n    \"refs\": [\n      [\n        \"first\",\n        \"last\"\n      ],\n      [\n        \"first\",\n        \"middle\",\n        \"last\"\n      ],\n      [\n        \"first\",\n        \"middle_initial\",\n        \"last\"\n      ]\n    ]\n  },\n  \"refs\": {}\n}",
      "yaml": "full_name:\n  type: combine-list\n  refs:\n  - - first\n    - last\n  - - first\n    - middle\n    - last\n  - - first\n    - middle_initial\n    - last\n  config:\n    join_with: ' '\nrefs:\n  first:\n    type: values\n    data:\n    - zebra\n    - hedgehog\n    - llama\n    - flamingo\n  last:\n    type: values\n    data:\n    - jones\n    - smith\n    - williams\n  middle:\n    type: values\n    data:\n    - cloud\n    - sage\n    - river\n  middle_initial:\n    type: values\n    data:\n      a: 0.3\n      m: 0.3\n      j: 0.1\n      l: 0.1\n      e: 0.1\n      w: 0.1",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nrefs = spec_builder.refs()\nfirst = refs.values(\n    key=\"first\",\n    data=[\"zebra\", \"hedgehog\", \"llama\", \"flamingo\"])\nlast = refs.values(\n    key=\"last\",\n    data=[\"jones\", \"smith\", \"williams\"])\nmiddle = refs.values(\n    key=\"middle\",\n    data=[\"cloud\", \"sage\", \"river\"])\nmiddle_initial = refs.values(\n    key=\"middle_initial\",\n    data={\"a\": 0.3, \"m\": 0.3, \"j\": 0.1, \"l\": 0.1, \"e\": 0.1, \"w\": 0.1})\n\nspec_builder.combine_list(\n    key='full_name',\n    refs=[\n        [first, last],\n        [first, middle, last],\n        [first, middle_initial, last],\n        ],\n    join_with=\" \")\n\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "zebra jones\nzebra cloud jones\nzebra m jones\nhedgehog smith\nhedgehog sage smith"
    },
    "uniform_date_example_exhaustive": {
      "json": "{\n  \"dates:date?duration_days=90&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\": {}\n}",
      "yaml": "dates:date?duration_days=90&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.add_field(\"dates:date?duration_days=90&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\", {})\n\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 1000 \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
      "output": "15-Dec-2050 14:32\n31-Jan-2051 22:57"
    },
    "uniform_date_example_one": {
      "json": "{\n  \"dates:date\": {}\n}",
      "yaml": "dates:date: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.add_field(\"dates:date\", {})\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date\": {}}' --log-level error -i 5",
      "output": "12-05-2021\n30-04-2021\n12-05-2021\n01-05-2021\n09-05-2021"
    },
    "uniform_date_example_two": {
      "json": "{\n  \"dates:date?offset=1\": {}\n}",
      "yaml": "dates:date?offset=1: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.add_field(\"dates:date?offset=1\", {})\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?offset=1\": {}}' --log-level error -i 5",
      "output": "03-05-2021\n17-05-2021\n14-05-2021\n27-04-2021\n15-05-2021"
    },
    "uniform_date_example_three": {
      "json": "{\n  \"dates:date?duration_days=1\": {}\n}",
      "yaml": "dates:date?duration_days=1: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.add_field(\"dates:date?duration_days=1\", {})\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?duration_days=1\": {}}' --log-level error -i 5",
      "output": "23-04-2021\n23-04-2021\n24-04-2021\n24-04-2021\n24-04-2021"
    },
    "uniform_date_example_four": {
      "json": "{\n  \"dates:date?duration_days=10\": {}\n}",
      "yaml": "dates:date?duration_days=10: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.add_field(\"dates:date?duration_days=10\", {})\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?duration_days=10\": {}}' --log-level error -i 5",
      "output": "24-04-2021\n30-04-2021\n28-04-2021\n27-04-2021\n03-05-2021"
    },
    "uniform_date_example_five": {
      "json": "{\n  \"dates:date?duration_days=1&offset=1\": {}\n}",
      "yaml": "dates:date?duration_days=1&offset=1: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.add_field(\"dates:date?duration_days=1&offset=1\", {})\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?duration_days=1&offset=1\": {}}' --log-level error -i 5",
      "output": "23-04-2021\n23-04-2021\n22-04-2021\n22-04-2021\n23-04-2021"
    },
    "uniform_date_example_six": {
      "json": "{\n  \"dates:date?duration_days=1&offset=-1\": {}\n}",
      "yaml": "dates:date?duration_days=1&offset=-1: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.add_field(\"dates:date?duration_days=1&offset=-1\", {})\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?duration_days=1&offset=-1\": {}}' --log-level error -i 5",
      "output": "24-04-2021\n25-04-2021\n25-04-2021\n24-04-2021\n25-04-2021"
    },
    "uniform_date_example_seven": {
      "json": "{\n  \"dates:date?duration_days=1&offset=1&start=15-12-2050\": {}\n}",
      "yaml": "dates:date?duration_days=1&offset=1&start=15-12-2050: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.add_field(\"dates:date?duration_days=1&offset=1&start=15-12-2050\", {})\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?duration_days=1&offset=1&start=15-12-2050\": {}}' --log-level error -i 5",
      "output": "14-12-2050\n14-12-2050\n14-12-2050\n14-12-2050\n14-12-2050"
    },
    "uniform_date_example_eight": {
      "json": "{\n  \"dates:date?duration_days=1&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\": {}\n}",
      "yaml": "dates:date?duration_days=1&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.add_field(\"dates:date?duration_days=1&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\", {})\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?duration_days=1&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\": {}}' --log-level error -i 5",
      "output": "16-Dec-2050 06:51\n15-Dec-2050 23:29\n16-Dec-2050 08:45\n15-Dec-2050 19:40\n16-Dec-2050 05:42"
    },
    "centered_date_example_exhaustive": {
      "json": "{\n  \"dates:date?center_date=20500601 12:00&format=%Y%m%d %H:%M&stddev_days=2\": {}\n}",
      "yaml": "dates:date?center_date=20500601 12:00&format=%Y%m%d %H:%M&stddev_days=2: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.add_field(\"dates:date?center_date=20500601 12:00&format=%Y%m%d %H:%M&stddev_days=2\", {})\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?center_date=20500601 12:00&format=%Y%m%d %H:%M&stddev_days=2\": {}}' --log-level error -i 5",
      "output": "20500603 14:13\n20500602 20:20\n20500530 11:21\n20500602 01:49\n20500603 14:05"
    },
    "centered_date_example_one": {
      "json": "{\n  \"dates:date?stddev_days=1\": {}\n}",
      "yaml": "dates:date?stddev_days=1: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.add_field(\"dates:date?stddev_days=1\", {})\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?stddev_days=1\": {}}' --log-level error -i 5",
      "output": "22-04-2021\n22-04-2021\n23-04-2021\n23-04-2021\n23-04-2021"
    },
    "centered_date_example_two": {
      "json": "{\n  \"dates:date?stddev_days=15\": {}\n}",
      "yaml": "dates:date?stddev_days=15: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.add_field(\"dates:date?stddev_days=15\", {})\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?stddev_days=15\": {}}' --log-level error -i 5",
      "output": "08-05-2021\n10-04-2021\n22-04-2021\n14-04-2021\n09-04-2021"
    },
    "range_spec_example_one": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "range_spec_example_two": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "rand_range_spec_example_one": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "uuid_spec_example_one": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "geo_point_spec_example_one": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "ip_spec_example_one": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "ip_precise_example_one": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "ip_precise_example_two": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "ip_precise_example_three": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "weighted_ref_example_one": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "select_list_example_one": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "select_list_example_two": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "csv_spec_example_one": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "csv_spec_example_two": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "csv_select_example_one": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "nested_example_one": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 1",
      "output": ""
    },
    "char_class_spec_example_one": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 5",
      "output": ""
    },
    "char_class_spec_example_two": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 10",
      "output": ""
    },
    "unicode_range_example_one": {
      "json": "{}",
      "yaml": "{}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\n\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{}' --log-level error -i 10",
      "output": ""
    },
    "count_dist_example_one": {
      "json": "{\n  \"field\": {\n    \"type\": \"char_class\",\n    \"data\": \"visible\",\n    \"config\": {\n      \"count_dist\": \"normal(mean=5, stddev=2, min=1, max=9)\"\n    }\n  }\n}",
      "yaml": "field:\n  type: char_class\n  data: visible\n  config:\n    count_dist: normal(mean=5, stddev=2, min=1, max=9)",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\n\nspec_builder.char_class(key='field',\n                        data='visible',\n                        count_dist='normal(mean=5, stddev=2, min=1, max=9)')\n\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "fz{ieEp\nn=G\n\\O]@9B0k\nW~V%^\n2NC\\&u"
    }
  }
}
