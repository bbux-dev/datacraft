{
  "examples": {
    "overview_example_one": {
      "json": "{\n  \"combine\": {\n    \"type\": \"combine\",\n    \"refs\": [\"ONE\", \"TWO\"]\n  },\n  \"refs\": {\n    \"ONE\": {\n      \"type\": \"values\",\n      \"data\": [\"A\", \"B\", \"C\"]\n    },\n    \"TWO\": {\n      \"type\": \"values\",\n      \"data\": [1, 2, 3]\n    }\n  }\n}",
      "yaml": "combine:\n  type: combine\n  refs: [ONE, TWO]\nrefs:\n  ONE:\n    type: values\n    data: [A, B, C]\n  TWO:\n    type: values\n    data: [1, 2, 3]",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nrefs = spec_builder.refs()\none = refs.values('ONE', [\"A\", \"B\", \"C\"])\ntwo = refs.values('TWO', [1, 2, 3])\n\nspec_builder.combine('combine', refs=[one, two])\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 7",
      "output": "A1\nB2\nC3\nA1\nB2\nC3\nA1"
    },
    "overview_example_two": {
      "json": "{\n  \"combine\": {\n    \"type\": \"combine\",\n    \"refs\": [\"ONE\", \"TWO\"]\n  },\n  \"refs\": {\n    \"ONE\": {\n      \"type\": \"values\",\n      \"data\": [\"A\", \"B\", \"C\"]\n    },\n    \"TWO\": {\n      \"type\": \"values\",\n      \"data\": [1, 2, 3, 4]\n    }\n  }\n}",
      "yaml": "combine:\n  type: combine\n  refs: [ONE, TWO]\nrefs:\n  ONE:\n    type: values\n    data: [A, B, C]\n  TWO:\n    type: values\n    data: [1, 2, 3, 4]",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nrefs = spec_builder.refs()\none = refs.values('ONE', [\"A\", \"B\", \"C\"])\ntwo = refs.values('TWO', [1, 2, 3, 4])\n\nspec_builder.combine('combine', refs=[one, two])\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 12 \\\n  | sort",
      "output": "A1\nA2\nA3\nA4\nB1\nB2\nB3\nB4\nC1\nC2\nC3\nC4"
    },
    "overview_example_three": {
      "json": "{\n  \"combine\": {\n    \"type\": \"combine\",\n    \"refs\": [\"ONE\", \"TWO\"]\n  },\n  \"refs\": {\n    \"ONE\": {\n      \"type\": \"values\",\n      \"data\": [\"A\", \"B\", \"C\"],\n      \"config\": {\n        \"sample\": true\n      }\n    },\n    \"TWO\": {\n      \"type\": \"values\",\n      \"data\": [1, 2, 3, 4],\n      \"config\": {\n        \"sample\": \"yes\"\n      }\n    }\n  }\n}",
      "yaml": "combine:\n  type: combine\n  refs: [ONE, TWO]\nrefs:\n  ONE:\n    type: values\n    data: [A, B, C]\n    config:\n      sample: true\n  TWO:\n    type: values\n    data: [1, 2, 3, 4]\n    config:\n      sample: 'yes'",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nrefs = spec_builder.refs()\none = refs.values('ONE', [\"A\", \"B\", \"C\"], sample=True)\ntwo = refs.values('TWO', [1, 2, 3, 4], sample=\"yes\")\n\nspec_builder.combine('combine', refs=[one, two])\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "C1\nB3\nA2\nB1\nA1"
    },
    "values_shorthand_one": {
      "json": "{\n  \"field1\": {\n    \"type\": \"values\",\n    \"data\": [1, 2, 3, 4, 5]\n  },\n  \"field2\": {\n    \"type\": \"values\",\n    \"data\": {\"A\": 0.5, \"B\": 0.3, \"C\": 0.2}\n  },\n  \"field3\": {\n    \"type\": \"values\",\n    \"data\": \"CONSTANT\"\n  }\n}",
      "yaml": "field1:\n  type: values\n  data: [1, 2, 3, 4, 5]\nfield2:\n  type: values\n  data: {A: 0.5, B: 0.3, C: 0.2}\nfield3:\n  type: values\n  data: CONSTANT",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field('field1', dataspec.builder.values([1, 2, 3, 4, 5]))\nspec_builder.add_field('field2', dataspec.builder.values({\"A\": 0.5, \"B\": 0.3, \"C\": 0.2}))\nspec_builder.add_field('field3', dataspec.builder.values(\"CONSTANT\"))\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "1\nA\nCONSTANT\n2\nA\nCONSTANT\n3\nB\nCONSTANT\n4\nA\nCONSTANT\n5\nC\nCONSTANT"
    },
    "values_shorthand_two": {
      "json": "{\n  \"field1\": [1, 2, 3, 4, 5],\n  \"field2\": {\n    \"A\": 0.5,\n    \"B\": 0.3,\n    \"C\": 0.2\n  },\n  \"field3\": \"CONSTANT\"\n}",
      "yaml": "field1: [1, 2, 3, 4, 5]\nfield2:\n  A: 0.5\n  B: 0.3\n  C: 0.2\nfield3: CONSTANT",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field('field1', [1, 2, 3, 4, 5])\nspec_builder.add_field('field2', {\"A\": 0.5, \"B\": 0.3, \"C\": 0.2})\nspec_builder.add_field('field3', \"CONSTANT\")\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "1\nA\nCONSTANT\n2\nC\nCONSTANT\n3\nA\nCONSTANT\n4\nA\nCONSTANT\n5\nB\nCONSTANT"
    },
    "inline_key_example": {
      "json": "{\n  \"network:ipv4?cidr=192.168.0.0/16\": {}\n}",
      "yaml": "network:ipv4?cidr=192.168.0.0/16: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"network:ipv4?cidr=192.168.0.0/16\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"network:ipv4?cidr=192.168.0.0/16\": {}}' --log-level error -i 5",
      "output": "192.168.14.9\n192.168.161.229\n192.168.96.176\n192.168.114.209\n192.168.61.146"
    },
    "config_example_one": {
      "json": "{\n  \"ONE\": {\n    \"type\": \"values\",\n    \"data\": [1, 2, 3],\n    \"config\": {\n      \"prefix\": \"TEST\",\n      \"suffix\": \"@DEMO\"\n    }\n  },\n  \"TWO?prefix=TEST&suffix=@DEMO\": {\n    \"type\": \"values\",\n    \"data\": [1, 2, 3]\n  }\n}",
      "yaml": "ONE:\n  type: values\n  data: [1, 2, 3]\n  config:\n    prefix: TEST\n    suffix: '@DEMO'\nTWO?prefix=TEST&suffix=@DEMO:\n  type: values\n  data: [1, 2, 3]",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.values('ONE', [1, 2, 3], prefix='TEST', suffix='@DEMO')\nspec_builder.values('TWO?prefix=TEST&suffix=@DEMO', [1, 2, 3])\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "TEST1@DEMO\nTEST1@DEMO\nTEST2@DEMO\nTEST2@DEMO\nTEST3@DEMO\nTEST3@DEMO\nTEST1@DEMO\nTEST1@DEMO\nTEST2@DEMO\nTEST2@DEMO"
    },
    "common_config_example_one": {
      "json": "{\n  \"field\": {\n    \"type\": \"values\",\n    \"data\": [\"world\", \"beautiful\", \"destiny\"],\n    \"config\": {\n      \"prefix\": \"hello \"\n    }\n  }\n}",
      "yaml": "field:\n  type: values\n  data: [world, beautiful, destiny]\n  config:\n    prefix: 'hello '",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.values('field', \n                    [\"world\", \"beautiful\", \"destiny\"], \n                    prefix='hello ')\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "hello world\nhello beautiful\nhello destiny\nhello world\nhello beautiful"
    },
    "count_dist_example_one": {
      "json": "{\n  \"field\": {\n    \"type\": \"char_class\",\n    \"data\": \"visible\",\n    \"config\": {\n      \"count_dist\": \"normal(mean=5, stddev=2, min=1, max=9)\"\n    }\n  }\n}",
      "yaml": "field:\n  type: char_class\n  data: visible\n  config:\n    count_dist: normal(mean=5, stddev=2, min=1, max=9)",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.char_class(key='field',\n                        data='visible',\n                        count_dist='normal(mean=5, stddev=2, min=1, max=9)')\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "vp}MHZh\n{^6_@\n$dY@:\n]\n);`~AQz"
    },
    "constants_example_one": {
      "json": "{\n  \"constant1\": {\n    \"type\": \"values\",\n    \"data\": 42\n  },\n  \"shorthand_constant\": \"This is simulated data and should not be used for nefarious purposes\"\n}",
      "yaml": "constant1:\n  type: values\n  data: 42\nshorthand_constant: This is simulated data and should not be used for nefarious purposes",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.values('constant1', 42)\nspec_builder.add_field('shorthand_constant', \"This is simulated data and should not be used for nefarious purposes\")\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "42\nThis is simulated data and should not be used for nefarious purposes\n42\nThis is simulated data and should not be used for nefarious purposes\n42\nThis is simulated data and should not be used for nefarious purposes\n42\nThis is simulated data and should not be used for nefarious purposes\n42\nThis is simulated data and should not be used for nefarious purposes"
    },
    "list_values_example_one": {
      "json": "{\n  \"list1\": {\n    \"type\": \"values\",\n    \"data\": [200, 202, 303, 400, 404, 500]\n  },\n  \"shorthand_list\": [200, 202, 303, 400, 404, 500],\n  \"random_pet?sample=true\": [\"dog\", \"cat\", \"bunny\", \"pig\", \"rhino\", \"hedgehog\"]\n}",
      "yaml": "list1:\n  type: values\n  data: [200, 202, 303, 400, 404, 500]\nshorthand_list: [200, 202, 303, 400, 404, 500]\nrandom_pet?sample=true: [dog, cat, bunny, pig, rhino, hedgehog]",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.values('list1', [200, 202, 303, 400, 404, 500])\nspec_builder.add_field(\"shorthand_list\",  [200, 202, 303, 400, 404, 500])\nspec_builder.add_field(\"random_pet?sample=true\", [\"dog\", \"cat\", \"bunny\", \"pig\", \"rhino\", \"hedgehog\"])\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "200\n200\nrhino\n202\n202\npig\n303\n303\ndog\n400\n400\npig\n404\n404\ncat"
    },
    "weighted_values_example_one": {
      "json": "{\n  \"weighted1\": {\n    \"type\": \"values\",\n    \"data\": {\"200\": 0.4, \"202\": 0.3, \"303\": 0.1, \"400\": 0.05, \"403\": 0.05, \"404\": 0.05, \"500\": 0.05}\n  },\n  \"shorthand_weighted\": {\n    \"200\": 0.4,\n    \"202\": 0.3,\n    \"303\": 0.1,\n    \"400\": 0.05,\n    \"403\": 0.05,\n    \"404\": 0.05,\n    \"500\": 0.05\n  }\n}",
      "yaml": "weighted1:\n  type: values\n  data: {'200': 0.4, '202': 0.3, '303': 0.1, '400': 0.05, '403': 0.05, '404': 0.05, '500': 0.05}\nshorthand_weighted:\n  '200': 0.4\n  '202': 0.3\n  '303': 0.1\n  '400': 0.05\n  '403': 0.05\n  '404': 0.05\n  '500': 0.05",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.values('weighted1', {\n        \"200\": 0.4, \"202\": 0.3, \"303\": 0.1,\n        \"400\": 0.05, \"403\": 0.05, \"404\": 0.05, \"500\": 0.05\n})\nspec_builder.add_field(\"shorthand_weighted\", {\n        \"200\": 0.4, \"202\": 0.3, \"303\": 0.1,\n        \"400\": 0.05, \"403\": 0.05, \"404\": 0.05, \"500\": 0.05\n})\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "200\n202\n200\n403\n202\n202\n202\n200\n200\n400"
    },
    "sample_mode_example_one": {
      "json": "{\n  \"combine\": {\n    \"type\": \"combine\",\n    \"refs\": [\"ONE\", \"TWO\"]\n  },\n  \"refs\": {\n    \"ONE?sample=true\": [\"A\", \"B\", \"C\"],\n    \"TWO?sample=true\": [1, 2, 3, 4]\n  }\n}",
      "yaml": "combine:\n  type: combine\n  refs: [ONE, TWO]\nrefs:\n  ONE?sample=true: [A, B, C]\n  TWO?sample=true: [1, 2, 3, 4]",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nrefs = spec_builder.refs()\nrefs.add_field('ONE?sample=true', [\"A\", \"B\", \"C\"])\nrefs.add_field('TWO?sample=true', [1, 2, 3, 4])\n\nspec_builder.combine('combine', refs=['ONE', 'TWO'])\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "A1\nC1\nA1\nC4\nC4"
    },
    "combine_spec_example_one": {
      "json": "{\n  \"combine\": {\n    \"type\": \"combine\",\n    \"refs\": [\"first\", \"last\"],\n    \"config\": {\n      \"join_with\": \" \"\n    }\n  },\n  \"refs\": {\n    \"first\": {\n      \"type\": \"values\",\n      \"data\": [\"zebra\", \"hedgehog\", \"llama\", \"flamingo\"]\n    },\n    \"last\": {\n      \"type\": \"values\",\n      \"data\": [\"jones\", \"smith\", \"williams\"]\n    }\n  }\n}",
      "yaml": "combine:\n  type: combine\n  refs: [first, last]\n  config:\n    join_with: ' '\nrefs:\n  first:\n    type: values\n    data: [zebra, hedgehog, llama, flamingo]\n  last:\n    type: values\n    data: [jones, smith, williams]",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nrefs = spec_builder.refs()\nfirst = refs.values(key=\"first\",\n                    data=[\"zebra\", \"hedgehog\", \"llama\", \"flamingo\"])\nlast = refs.values(key=\"last\",\n                   data=[\"jones\", \"smith\", \"williams\"])\n\nspec_builder.combine('combine', refs=[first, last], join_with=\" \")\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "zebra jones\nhedgehog smith\nllama williams\nflamingo jones\nzebra smith"
    },
    "combine_list_spec_example_one": {
      "json": "{\n  \"full_name\": {\n    \"type\": \"combine-list\",\n    \"refs\": [\n      [\"first\", \"last\"],\n      [\"first\", \"middle\", \"last\"],\n      [\"first\", \"middle_initial\", \"last\"]\n    ],\n    \"config\": {\n      \"join_with\": \" \"\n    }\n  },\n  \"refs\": {\n    \"first\": {\n      \"type\": \"values\",\n      \"data\": [\"zebra\", \"hedgehog\", \"llama\", \"flamingo\"]\n    },\n    \"last\": {\n      \"type\": \"values\",\n      \"data\": [\"jones\", \"smith\", \"williams\"]\n    },\n    \"middle\": {\n      \"type\": \"values\",\n      \"data\": [\"cloud\", \"sage\", \"river\"]\n    },\n    \"middle_initial\": {\n      \"type\": \"values\",\n      \"data\": {\"a\": 0.3, \"m\": 0.3, \"j\": 0.1, \"l\": 0.1, \"e\": 0.1, \"w\": 0.1}\n    }\n  }\n}",
      "yaml": "full_name:\n  type: combine-list\n  refs:\n  - [first, last]\n  - [first, middle, last]\n  - [first, middle_initial, last]\n  config:\n    join_with: ' '\nrefs:\n  first:\n    type: values\n    data: [zebra, hedgehog, llama, flamingo]\n  last:\n    type: values\n    data: [jones, smith, williams]\n  middle:\n    type: values\n    data: [cloud, sage, river]\n  middle_initial:\n    type: values\n    data: {a: 0.3, m: 0.3, j: 0.1, l: 0.1, e: 0.1, w: 0.1}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nrefs = spec_builder.refs()\nfirst = refs.values(\n    key=\"first\",\n    data=[\"zebra\", \"hedgehog\", \"llama\", \"flamingo\"])\nlast = refs.values(\n    key=\"last\",\n    data=[\"jones\", \"smith\", \"williams\"])\nmiddle = refs.values(\n    key=\"middle\",\n    data=[\"cloud\", \"sage\", \"river\"])\nmiddle_initial = refs.values(\n    key=\"middle_initial\",\n    data={\"a\": 0.3, \"m\": 0.3, \"j\": 0.1, \"l\": 0.1, \"e\": 0.1, \"w\": 0.1})\n\nspec_builder.combine_list(\n    key='full_name',\n    refs=[\n        [first, last],\n        [first, middle, last],\n        [first, middle_initial, last],\n        ],\n    join_with=\" \")\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "zebra jones\nzebra cloud jones\nzebra a jones\nhedgehog smith\nhedgehog sage smith"
    },
    "uniform_date_example_exhaustive": {
      "json": "{\n  \"dates:date?duration_days=90&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\": {}\n}",
      "yaml": "dates:date?duration_days=90&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?duration_days=90&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 1000 \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
      "output": "15-Dec-2050 13:41\n31-Jan-2051 23:32"
    },
    "uniform_date_example_one": {
      "json": "{\n  \"dates:date\": {}\n}",
      "yaml": "dates:date: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date\": {}}' --log-level error -i 1000 \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
      "output": "02-07-2021\n01-08-2021"
    },
    "uniform_date_example_two": {
      "json": "{\n  \"dates:date?offset=1\": {}\n}",
      "yaml": "dates:date?offset=1: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?offset=1\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?offset=1\": {}}' --log-level error -i 1000 \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
      "output": "01-07-2021\n31-07-2021"
    },
    "uniform_date_example_three": {
      "json": "{\n  \"dates:date?duration_days=1\": {}\n}",
      "yaml": "dates:date?duration_days=1: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?duration_days=1\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?duration_days=1\": {}}' --log-level error -i 1000 \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
      "output": "02-07-2021\n03-07-2021"
    },
    "uniform_date_example_four": {
      "json": "{\n  \"dates:date?duration_days=10\": {}\n}",
      "yaml": "dates:date?duration_days=10: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?duration_days=10\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?duration_days=10\": {}}' --log-level error -i 1000 \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
      "output": "02-07-2021\n12-07-2021"
    },
    "uniform_date_example_five": {
      "json": "{\n  \"dates:date?duration_days=1&offset=1\": {}\n}",
      "yaml": "dates:date?duration_days=1&offset=1: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?duration_days=1&offset=1\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?duration_days=1&offset=1\": {}}' --log-level error -i 1000 \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
      "output": "01-07-2021\n02-07-2021"
    },
    "uniform_date_example_six": {
      "json": "{\n  \"dates:date?duration_days=1&offset=-1\": {}\n}",
      "yaml": "dates:date?duration_days=1&offset=-1: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?duration_days=1&offset=-1\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?duration_days=1&offset=-1\": {}}' --log-level error -i 1000 \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
      "output": "03-07-2021\n04-07-2021"
    },
    "uniform_date_example_seven": {
      "json": "{\n  \"dates:date?duration_days=1&offset=1&start=15-12-2050\": {}\n}",
      "yaml": "dates:date?duration_days=1&offset=1&start=15-12-2050: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?duration_days=1&offset=1&start=15-12-2050\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?duration_days=1&offset=1&start=15-12-2050\": {}}' --log-level error -i 1000 \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
      "output": "14-12-2050\n14-12-2050"
    },
    "uniform_date_example_eight": {
      "json": "{\n  \"dates:date?duration_days=1&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\": {}\n}",
      "yaml": "dates:date?duration_days=1&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?duration_days=1&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?duration_days=1&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\": {}}' --log-level error -i 1000 \\\n  | sort -t- -k3n -k2M -k1n | uniq | sed -n '1p;$p'",
      "output": "15-Dec-2050 12:00\n16-Dec-2050 11:58"
    },
    "centered_date_example_exhaustive": {
      "json": "{\n  \"dates:date?center_date=20500601 12:00&format=%Y%m%d %H:%M&stddev_days=2\": {}\n}",
      "yaml": "dates:date?center_date=20500601 12:00&format=%Y%m%d %H:%M&stddev_days=2: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?center_date=20500601 12:00&format=%Y%m%d %H:%M&stddev_days=2\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?center_date=20500601 12:00&format=%Y%m%d %H:%M&stddev_days=2\": {}}' --log-level error -i 1000 \\\n  | sort -n | uniq | sed -n '1p;$p'",
      "output": "20500525 20:43\n20500607 00:36"
    },
    "centered_date_example_one": {
      "json": "{\n  \"dates:date?stddev_days=1\": {}\n}",
      "yaml": "dates:date?stddev_days=1: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?stddev_days=1\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?stddev_days=1\": {}}' --log-level error -i 1000 \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
      "output": "29-06-2021\n05-07-2021"
    },
    "centered_date_example_two": {
      "json": "{\n  \"dates:date?stddev_days=15\": {}\n}",
      "yaml": "dates:date?stddev_days=15: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?stddev_days=15\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"dates:date?stddev_days=15\": {}}' --log-level error -i 1000 \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
      "output": "19-05-2021\n16-08-2021"
    },
    "range_spec_example_one": {
      "json": "{\n  \"zero_to_ten\": {\n    \"type\": \"range\",\n    \"data\": [0, 10, 0.5]\n  },\n  \"range_shorthand1:range\": {\n    \"data\": [0, 10, 0.5]\n  },\n  \"range_shorthand2:range\": [0, 10, 0.5]\n}",
      "yaml": "zero_to_ten:\n  type: range\n  data: [0, 10, 0.5]\nrange_shorthand1:range:\n  data: [0, 10, 0.5]\nrange_shorthand2:range: [0, 10, 0.5]",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.range_spec(key=\"zero_to_ten\", data=[0, 10, 0.5])\nspec_builder.add_field(key=\"range_shorthand1:range\", spec={\"data\": [0, 10, 0.5]})\nspec_builder.add_field(key=\"range_shorthand2:range\", spec=[0, 10, 0.5])\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "0.0\n0.0\n0.0\n0.5\n0.5\n0.5\n1.0\n1.0\n1.0\n1.5\n1.5\n1.5\n2.0\n2.0\n2.0"
    },
    "range_spec_example_two": {
      "json": "{\n  \"salaries\": {\n    \"type\": \"range\",\n    \"data\": [[1000, 10000, 1000], [10000, 55000, 5000], [55000, 155000, 10000]]\n  }\n}",
      "yaml": "salaries:\n  type: range\n  data: [[1000, 10000, 1000], [10000, 55000, 5000], [55000, 155000, 10000]]",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.range_spec(\n    key=\"salaries\",\n    data=[\n      [1000, 10000, 1000],\n      [10000, 55000, 5000],\n      [55000, 155000, 10000]\n    ])\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "1000\n10000\n55000\n2000\n15000"
    },
    "rand_range_spec_example_one": {
      "json": "{\n  \"population\": {\n    \"type\": \"rand_range\",\n    \"data\": [100, 1000],\n    \"config\": {\n      \"cast\": \"int\"\n    }\n  },\n  \"pop:rand_range?cast=f\": [200.2, 1222.7, 2]\n}",
      "yaml": "population:\n  type: rand_range\n  data: [100, 1000]\n  config:\n    cast: int\npop:rand_range?cast=f: [200.2, 1222.7, 2]",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.rand_range(\n    key=\"population\",\n    data=[100, 1000],\n    cast=\"int\")\nspec_builder.add_field(\"pop:rand_range?cast=f\", [200.2, 1222.7, 2])\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5  --format json -x",
      "output": "{\"population\": 828, \"pop\": 630.87}\n{\"population\": 339, \"pop\": 361.01}\n{\"population\": 254, \"pop\": 549.29}\n{\"population\": 509, \"pop\": 261.89}\n{\"population\": 980, \"pop\": 594.94}"
    },
    "uuid_spec_example_one": {
      "json": "{\n  \"id\": {\n    \"type\": \"uuid\"\n  },\n  \"id_shorthand:uuid\": {}\n}",
      "yaml": "id:\n  type: uuid\nid_shorthand:uuid: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.uuid(key=\"id\")\nspec_builder.add_field(\"id_shorthand:uuid\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"id\": {\"type\": \"uuid\"}, \"id_shorthand:uuid\": {}}' --log-level error -i 5",
      "output": "130a7ce9-172d-4a5e-9245-e302c7115c68\nc7faf24d-dc8c-4535-bc19-cccaffeba945\n9de09fa7-cb2e-4d09-9346-54a1cb573383\nc3035653-d787-40c4-9007-211a78184743\n0038703f-8435-4ff2-bfd2-564cec464b84\n69b754d2-e73c-4f98-8497-3efabc13e6cd\nbd28c1cf-d66a-4d3c-bec2-7985ba999726\na23187cf-33ba-4917-a7d3-ba0e589889a8\n6efa948f-e9e8-4fd2-81f7-1385adaba4ed\n8534c17c-5eb9-418a-807d-c60a510f28c0"
    },
    "char_class_spec_example_one": {
      "json": "{\n  \"one_to_five_digits:cc-digits?min=1&max=5\": {}\n}",
      "yaml": "one_to_five_digits:cc-digits?min=1&max=5: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"one_to_five_digits:cc-digits?min=1&max=5\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"one_to_five_digits:cc-digits?min=1&max=5\": {}}' --log-level error -i 5",
      "output": "3062\n69470\n560\n49613\n368"
    },
    "char_class_spec_example_two": {
      "json": "{\n  \"password\": {\n    \"type\": \"char_class\",\n    \"data\": [\"word\", \"special\", \"hex-lower\", \"M4$p3c!@l$@uc3\"],\n    \"config\": {\n      \"mean\": 14,\n      \"stddev\": 2,\n      \"min\": 10,\n      \"max\": 18,\n      \"exclude\": [\n        \"-\",\n        \"\\\"\"\n      ]\n    }\n  }\n}",
      "yaml": "password:\n  type: char_class\n  data: [word, special, hex-lower, M4$p3c!@l$@uc3]\n  config:\n    mean: 14\n    stddev: 2\n    min: 10\n    max: 18\n    exclude:\n    - '-'\n    - '\"'",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.char_class(\n    key=\"password\",\n    data=[\n      \"word\",\n      \"special\",\n      \"hex-lower\",\n      \"M4$p3c!@l$@uc3\"\n    ],\n    mean=14,\n    stddev=2,\n    min=10,\n    max=18,\n    exclude=[\"-\", \"\\\"\"])\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 10",
      "output": "c3cFwpv!7c>(\n@qf`4;3yF7d#DM\n;'&5]$8pu3_7,E?\n|$aULq73cJY\nhb2cM4Zl2pPMnX_\nNV3TDhFsyQ)|4c\npd01u|859!p)iT\ni7$8F93x+3uKG\nd8hb@_SfHaP!\n,ps]`Sbw;k<3o["
    },
    "unicode_range_example_one": {
      "json": "{\n  \"text\": {\n    \"type\": \"unicode_range\",\n    \"data\": [\"3040\", \"309f\"],\n    \"config\": {\n      \"mean\": 5\n    }\n  }\n}",
      "yaml": "text:\n  type: unicode_range\n  data: ['3040', 309f]\n  config:\n    mean: 5",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.unicode_range(\"text\", [\"3040\", \"309f\"], mean=5)\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 10",
      "output": "\u3058\n\u3093\u3058\n\u3080\u306c\n\u3067\u3069\u3097\n\u3042\u3049\u3054\u305d\u306f\u3076\u3075\n\u306c\u308a\u3088\u3096\u3073\n\u3093\u309c\u308c\u3086\u3072\u3064\u3069\n\u3041\u305d\u309d\u3069\u305e\u304a\u3057\u308d\n\u3047\u3083\u3074\u3051\n\u3081\u304d\u309a"
    },
    "geo_point_spec_example_one": {
      "json": "{\n  \"egypt\": {\n    \"type\": \"geo.pair\",\n    \"config\": {\n      \"bbox\": [\n        31.33134,\n        22.03795,\n        34.19295,\n        25.00562\n      ],\n      \"precision\": 3\n    }\n  }\n}",
      "yaml": "egypt:\n  type: geo.pair\n  config:\n    bbox:\n    - 31.33134\n    - 22.03795\n    - 34.19295\n    - 25.00562\n    precision: 3",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.geo_pair(\"egypt\", bbox=[31.33134, 22.03795, 34.19295, 25.00562], precision=3)\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "33.341, 22.072\n 33.920, 24.315\n 32.019, 22.702\n 32.135, 24.033\n 33.032, 24.534"
    },
    "ip_spec_example_one": {
      "json": "{\n  \"network\": {\n    \"type\": \"ipv4\",\n    \"config\": {\n      \"cidr\": \"2.22.222.0/16\"\n    }\n  },\n  \"network_shorthand:ip?cidr=2.22.222.0/16\": {},\n  \"network_with_base:ip?base=192.168.0\": {}\n}",
      "yaml": "network:\n  type: ipv4\n  config:\n    cidr: 2.22.222.0/16\nnetwork_shorthand:ip?cidr=2.22.222.0/16: {}\nnetwork_with_base:ip?base=192.168.0: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.ipv4(key=\"network\", cidr=\"2.22.222.0/16\")\nspec_builder.add_field(\"network_shorthand:ip?cidr=2.22.222.0/16\", {})\nspec_builder.add_field(\"network_with_base:ip?base=192.168.0\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "2.22.45.93\n2.22.173.141\n192.168.0.15\n2.22.110.18\n2.22.137.49\n192.168.0.131\n2.22.111.100\n2.22.4.235\n192.168.0.64\n2.22.164.39\n2.22.193.130\n192.168.0.70\n2.22.23.245\n2.22.215.27\n192.168.0.88"
    },
    "ip_precise_example_one": {
      "json": "{\n  \"network:ip.precise?cidr=10.0.0.0/8\": {}\n}",
      "yaml": "network:ip.precise?cidr=10.0.0.0/8: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"network:ip.precise?cidr=10.0.0.0/8\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"network:ip.precise?cidr=10.0.0.0/8\": {}}' --log-level error -i 5",
      "output": "10.0.0.0\n10.0.0.1\n10.0.0.2\n10.0.0.3\n10.0.0.4"
    },
    "ip_precise_example_two": {
      "json": "{\n  \"network:ip.precise?cidr=192.168.0.0/14&sample=true\": {}\n}",
      "yaml": "network:ip.precise?cidr=192.168.0.0/14&sample=true: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"network:ip.precise?cidr=192.168.0.0/14&sample=true\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"network:ip.precise?cidr=192.168.0.0/14&sample=true\": {}}' --log-level error -i 5",
      "output": "192.169.145.223\n192.168.179.53\n192.168.91.96\n192.169.196.71\n192.170.176.96"
    },
    "ip_precise_example_three": {
      "json": "{\n  \"network:ip.precise?cidr=2.22.0.0/22\": {}\n}",
      "yaml": "network:ip.precise?cidr=2.22.0.0/22: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"network:ip.precise?cidr=2.22.0.0/22\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec --inline '{\"network:ip.precise?cidr=2.22.0.0/22\": {}}' --log-level error -i 5",
      "output": "2.22.0.0\n2.22.0.1\n2.22.0.2\n2.22.0.3\n2.22.0.4"
    },
    "weighted_ref_example_one": {
      "json": "{\n  \"http_code\": {\n    \"type\": \"weightedref\",\n    \"data\": {\"GOOD_CODES\": 0.7, \"BAD_CODES\": 0.3}\n  },\n  \"refs\": {\n    \"GOOD_CODES\": {\n      \"200\": 0.5,\n      \"202\": 0.3,\n      \"203\": 0.1,\n      \"300\": 0.1\n    },\n    \"BAD_CODES\": {\n      \"400\": 0.5,\n      \"403\": 0.3,\n      \"404\": 0.1,\n      \"500\": 0.1\n    }\n  }\n}",
      "yaml": "http_code:\n  type: weightedref\n  data: {GOOD_CODES: 0.7, BAD_CODES: 0.3}\nrefs:\n  GOOD_CODES:\n    '200': 0.5\n    '202': 0.3\n    '203': 0.1\n    '300': 0.1\n  BAD_CODES:\n    '400': 0.5\n    '403': 0.3\n    '404': 0.1\n    '500': 0.1",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nrefs = spec_builder.refs()\nrefs.add_field('GOOD_CODES', {\"200\": 0.5, \"202\": 0.3, \"203\": 0.1, \"300\": 0.1})\nrefs.add_field('BAD_CODES', {\"400\": 0.5, \"403\": 0.3, \"404\": 0.1, \"500\": 0.1})\n\nspec_builder.weightedref('http_code', data={\"GOOD_CODES\": 0.7, \"BAD_CODES\": 0.3})\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "300\n200\n200\n400\n202"
    },
    "select_list_example_one": {
      "json": "{\n  \"ingredients\": {\n    \"type\": \"select_list_subset\",\n    \"data\": [\"onions\", \"mushrooms\", \"garlic\", \"bell peppers\", \"spinach\", \"potatoes\", \"carrots\"],\n    \"config\": {\n      \"mean\": 3,\n      \"stddev\": 1,\n      \"min\": 2,\n      \"max\": 4,\n      \"join_with\": \", \"\n    }\n  }\n}",
      "yaml": "ingredients:\n  type: select_list_subset\n  data: [onions, mushrooms, garlic, bell peppers, spinach, potatoes, carrots]\n  config:\n    mean: 3\n    stddev: 1\n    min: 2\n    max: 4\n    join_with: ', '",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.select_list_subset(\n    key=\"ingredients\",\n    data=[\"onions\", \"mushrooms\", \"garlic\", \"bell peppers\", \"spinach\", \"potatoes\", \"carrots\"],\n    mean=3,\n    stddev=1,\n    min=2,\n    max=4,\n    join_with=\", \")\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "mushrooms, garlic\ncarrots, potatoes\ngarlic, onions\ncarrots, potatoes, mushrooms\ngarlic, bell peppers, mushrooms"
    },
    "select_list_example_two": {
      "json": "{\n  \"ingredients\": {\n    \"type\": \"select_list_subset\",\n    \"data\": [\"onions\", \"mushrooms\", \"garlic\", \"bell peppers\", \"spinach\", \"potatoes\", \"carrots\"],\n    \"config\": {\n      \"mean\": 3,\n      \"stddev\": 1,\n      \"min\": 2,\n      \"max\": 4,\n      \"join_with\": \"\\\", \\\"\",\n      \"quote\": \"\\\"\"\n    }\n  }\n}",
      "yaml": "ingredients:\n  type: select_list_subset\n  data: [onions, mushrooms, garlic, bell peppers, spinach, potatoes, carrots]\n  config:\n    mean: 3\n    stddev: 1\n    min: 2\n    max: 4\n    join_with: '\", \"'\n    quote: '\"'",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.select_list_subset(\n    key=\"ingredients\",\n    data=[\"onions\", \"mushrooms\", \"garlic\", \"bell peppers\", \"spinach\", \"potatoes\", \"carrots\"],\n    mean=3,\n    stddev=1,\n    min=2,\n    max=4,\n    join_with=\"\\\", \\\"\",\n    quote=\"\\\"\")\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5",
      "output": "\"onions\", \"bell peppers\"\n\"carrots\", \"spinach\"\n\"mushrooms\", \"bell peppers\", \"carrots\"\n\"bell peppers\", \"garlic\"\n\"potatoes\", \"spinach\""
    },
    "csv_spec_example_one": {
      "json": "{\n  \"cities\": {\n    \"type\": \"csv\",\n    \"config\": {\n      \"datafile\": \"cities.csv\",\n      \"delimiter\": \"~\",\n      \"sample\": true\n    }\n  }\n}",
      "yaml": "cities:\n  type: csv\n  config:\n    datafile: cities.csv\n    delimiter: '~'\n    sample: true",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.csv(\n    key=\"cities\",\n    datafile=\"cities.csv\",\n    delimiter=\"~\",\n    sample=True)\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5 --datadir ./data",
      "output": "Oxford\nOxford\nLondon\nSeattle\nTokyo"
    },
    "csv_spec_example_two": {
      "json": "{\n  \"status\": {\n    \"type\": \"csv\",\n    \"config\": {\n      \"column\": 1,\n      \"configref\": \"tabs_config\"\n    }\n  },\n  \"description\": {\n    \"type\": \"csv\",\n    \"config\": {\n      \"column\": 2,\n      \"configref\": \"tabs_config\"\n    }\n  },\n  \"status_type:csv?configref=tabs_config&column=3\": {},\n  \"refs\": {\n    \"tabs_config\": {\n      \"type\": \"configref\",\n      \"config\": {\n        \"datafile\": \"tabs.csv\",\n        \"delimiter\": \"\\t\",\n        \"headers\": true\n      }\n    }\n  }\n}",
      "yaml": "status:\n  type: csv\n  config:\n    column: 1\n    configref: tabs_config\ndescription:\n  type: csv\n  config:\n    column: 2\n    configref: tabs_config\nstatus_type:csv?configref=tabs_config&column=3: {}\nrefs:\n  tabs_config:\n    type: configref\n    config:\n      datafile: tabs.csv\n      delimiter: \"\\t\"\n      headers: true",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.configref(\n    key=\"tabs_config\",\n    datafile=\"tabs.csv\",\n    delimiter=\"\\t\",\n    headers=True)\nspec_builder.csv(\n    key=\"status\",\n    column=1,\n    configref=\"tabs_config\")\nspec_builder.csv(\n    key=\"description\",\n    column=2,\n    configref=\"tabs_config\")\nspec_builder.add_field(\"status_type:csv?configref=tabs_config&column=3\", {})\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5 --datadir ./data",
      "output": "100\nContinue\nInformational\n101\nSwitching Protocols\nInformational\n200\nOK\nSuccessful\n201\nCreated\nSuccessful\n202\nAccepted\nSuccessful"
    },
    "csv_select_example_one": {
      "json": "{\n  \"placeholder\": {\n    \"type\": \"csv_select\",\n    \"data\": {\"geonameid\": 1, \"name\": 2, \"latitude\": 5, \"longitude\": 6, \"country_code\": 9, \"population\": 15},\n    \"config\": {\n      \"datafile\": \"allCountries.txt\",\n      \"headers\": false,\n      \"delimiter\": \"\\t\"\n    }\n  }\n}",
      "yaml": "placeholder:\n  type: csv_select\n  data: {geonameid: 1, name: 2, latitude: 5, longitude: 6, country_code: 9, population: 15}\n  config:\n    datafile: allCountries.txt\n    headers: false\n    delimiter: \"\\t\"",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.csv_select(\n    key=\"placeholder\",\n    data={\n        \"geonameid\": 1,\n        \"name\": 2,\n        \"latitude\": 5,\n        \"longitude\": 6,\n        \"country_code\": 9,\n        \"population\": 15\n    },\n    datafile=\"allCountries.txt\",\n    headers=False,\n    delimiter=\"\t\")\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 5 --datadir ./data",
      "output": "2986043\nPic de Font Blanca\n42.64991\n1.53335\nAD\n0\n2994701\nRoc M\u00e9l\u00e9\n42.58765\n1.74028\nAD\n0\n3007683\nPic des Langounelles\n42.61203\n1.47364\nAD\n0\n3017832\nPic de les Abelletes\n42.52535\n1.73343\nAD\n0\n3017833\nEstany de les Abelletes\n42.52915\n1.73362\nAD\n0"
    },
    "nested_example_one": {
      "json": "{\n  \"id\": {\n    \"type\": \"uuid\"\n  },\n  \"user\": {\n    \"type\": \"nested\",\n    \"fields\": {\n      \"user_id\": {\n        \"type\": \"uuid\"\n      },\n      \"geo\": {\n        \"type\": \"nested\",\n        \"fields\": {\n          \"place_id:cc-digits?mean=5\": {},\n          \"coordinates:geo.pair?as_list=true\": {}\n        }\n      }\n    }\n  }\n}",
      "yaml": "id:\n  type: uuid\nuser:\n  type: nested\n  fields:\n    user_id:\n      type: uuid\n    geo:\n      type: nested\n      fields:\n        place_id:cc-digits?mean=5: {}\n        coordinates:geo.pair?as_list=true: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\ngeo_fields = dataspec.spec_builder()\ngeo_fields.add_field(\"place_id:cc-digits?mean=5\", {})\ngeo_fields.add_field(\"coordinates:geo.pair?as_list=true\", {})\n\nuser_fields = dataspec.spec_builder()\nuser_fields.uuid(\"user_id\")\nuser_fields.nested(\"geo\", geo_fields.build())\n\nspec_builder.uuid(\"id\")\nspec_builder.nested(\"user\", user_fields.build())\n\nspec = spec_builder.build()",
      "command": "dataspec -s dataspec.json --log-level error -i 1",
      "output": "{\n    \"id\": \"327658cd-b3de-477a-a902-742efd03ef89\",\n    \"user\": {\n        \"user_id\": \"c14c7709-d0f6-4cd8-b9ff-a936960ca63f\",\n        \"geo\": {\n            \"place_id\": \"59283706\",\n            \"coordinates\": [\n                \"-142.8146\",\n                \" 66.3702\"\n            ]\n        }\n    },\n    \"_internal\": {\n        \"_iteration\": 0,\n        \"_field_group\": \"ALL\"\n    }\n}"
    }
  }
}