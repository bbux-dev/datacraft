{
  "examples": {
    "overview_example_one": {
      "json": "{\n  \"combine\": {\"type\": \"combine\", \"refs\": [\"ONE\", \"TWO\"]},\n  \"refs\": {\n    \"ONE\": [\"A\", \"B\", \"C\"],\n    \"TWO\": [1, 2, 3]\n  }\n}",
      "yaml": "---\ncombine:\n  type: combine\n  refs: [ONE, TWO]\nrefs:\n  ONE: [A, B, C]\n  TWO: [1, 2, 3]",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nrefs = spec_builder.refs()\none = refs.values('ONE', [\"A\", \"B\", \"C\"])\ntwo = refs.values('TWO', [1, 2, 3])\n\nspec_builder.combine('combine', refs=[one, two])\n\nspec = spec_builder.build()",
      "command": "dataspec -s ~/scratch/sample.json -i 7",
      "output": "A1\nB2\nC3\nA1\nB2\nC3\nA1"
    },
    "overview_example_two": {
      "json": "{\n  \"combine\": {\"type\": \"combine\", \"refs\": [\"ONE\", \"TWO\"]},\n  \"refs\": {\n    \"ONE\": [\"A\", \"B\", \"C\"],\n    \"TWO\": [1, 2, 3, 4]\n  }\n}",
      "yaml": "---\ncombine:\n  type: combine\n  refs: [ONE, TWO]\nrefs:\n  ONE: [A, B, C]\n  TWO: [1, 2, 3 ,4]",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nrefs = spec_builder.refs()\none = refs.values('ONE', [\"A\", \"B\", \"C\"])\ntwo = refs.values('TWO', [1, 2, 3, 4])\n\nspec_builder.combine('combine', refs=[one, two])\n\nspec = spec_builder.build()",
      "command": "dataspec -s ~/scratch/sample.json -i 12 | sort",
      "output": "A1\nA2\nA3\nA4\nB1\nB2\nB3\nB4\nC1\nC2\nC3\nC4"
    },
    "overview_example_three": {
      "json": "{\n  \"combine\": {\"type\": \"combine\", \"refs\": [\"ONE\", \"TWO\"]},\n  \"refs\": {\n    \"ONE?sample=true\": [\"A\", \"B\", \"C\"],\n    \"TWO?sample=true\": [1, 2, 3, 4]\n  }\n}",
      "yaml": "---\ncombine:\n  type: combine\n  refs: [ONE, TWO]\nrefs:\n  ONE?sample=true: [A, B, C]\n  TWO?sample=true: [1, 2, 3 ,4]",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nrefs = spec_builder.refs()\none = refs.values('ONE', [\"A\", \"B\", \"C\"], sample=True)\ntwo = refs.values('TWO', [1, 2, 3, 4], sample=\"yes\")\n\nspec_builder.combine('combine', refs=[one, two])\n\nspec = spec_builder.build()"
    },
    "values_shorthand_one": {
      "json": "{\n  \"field1\": {\"type\": \"values\", \"data\": [1, 2, 3, 4, 5]},\n  \"field2\": {\"type\": \"values\", \"data\": {\"A\": 0.5, \"B\": 0.3, \"C\": 0.2}},\n  \"field3\": {\"type\": \"values\", \"data\": \"CONSTANT\"}\n}",
      "yaml": "---\nfield1:\n  type: vaules\n  data: [1, 2, 3, 4, 5]\nfield2:\n  type: values\n  data:\n    A: 0.5\n    B: 0.3\n    C: 0.2\nfield3:\n  type: values\n  data: CONSTANT",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\nspec_builder.add_field('field1', spec_builder.values([1, 2, 3, 4, 5]))\nspec_builder.add_field('field2', spec_builder.values({\"A\": 0.5, \"B\": 0.3, \"C\": 0.2}))\nspec_builder.add_field('field3', spec_builder.values(\"CONSTANT\"))\n\nspec = spec_builder.build()"
    },
    "values_shorthand_two": {
      "json": "{\n  \"field1\": [1, 2, 3, 4, 5],\n  \"field2\": {\"A\": 0.5, \"B\": 0.3, \"C\": 0.2},\n  \"field3\": \"CONSTANT\"\n}",
      "yaml": "---\nfield1: [1, 2, 3, 4, 5]\nfield2:\n  A: 0.5\n  B: 0.3\n  C: 0.2\nfield3: CONSTANT",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\nspec_builder.add_field('field1', [1, 2, 3, 4, 5])\nspec_builder.add_field('field2', {\"A\": 0.5, \"B\": 0.3, \"C\": 0.2})\nspec_builder.add_field('field3', \"CONSTANT\")\n\nspec = spec_builder.build()"
    },
    "inline_key_example": {
      "json": "{\n  \"network:ipv4?cidr=192.168.0.0/16\": {}\n}",
      "yaml": "---\nnetwork:ipv4?cidr=192.168.0.0/16: {}",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\nspec_builder.add_field(\"network:ipv4?cidr=192.168.0.0/16\", {})\nspec = spec_builder.build()"
    },
    "config_example_one": {
      "json": "{\n  \"ONE\": {\n    \"type\": \"values\",\n    \"data\": [1, 2, 3],\n    \"config\": {\"prefix\": \"TEST\", \"suffix\": \"@DEMO\"}\n  },\n  \"TWO?prefix=TEST&suffix=@DEMO\": [1, 2, 3]\n}",
      "yaml": "---\nONE:\n  type: values\n  config:\n    prefix: TEST\n    suffix: '@DEMO'\n  data: [1, 2, 3]\nTWO?prefix=TEST&suffix=@DEMO: [1, 2, 3]",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.values('ONE', [1, 2, 3], prefix='TEST', suffix='@DEMO')\nspec_builder.values('TWO?prefix=TEST&suffix=@DEMO', [1, 2, 3])\n\nspec = spec_builder.build()"
    },
    "common_config_example_one": {
      "json": "{\n  \"field\": {\n      \"type\": \"values\",\n      \"config\": {\n        \"prefix\": \"Hello \"\n      },\n      \"data\": [\"world\", \"beautiful\", \"destiny\"]\n    }\n}",
      "yaml": "---\nfield:\n  type: values\n  config:\n    prefix: 'Hello '\n  data: [world, beautiful, destiny]",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.values('field', \n                    [\"world\", \"beautiful\", \"destiny\"], \n                    prefix='hello ')\n\nspec = spec_builder.build()"
    },
    "constants_example_one": {
      "json": "{\n  \"constant1\": {\"type\": \"values\", \"data\": 42},\n  \"shorthand_constant\": \"This is simulated data and should not be used for nefarious purposes\"\n}",
      "yaml": "constant1:\n  type: values\n  data: 42\nshorthand_constant: This is simulated data and should not be used for nefarious purposes",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.values('constant1', 42)\nspec_builder.add_field('shorthand_constant', \"This is simulated data and should not be used for nefarious purposes\")\n\nspec = spec_builder.build()"
    },
    "list_values_example_one": {
      "json": "{\n  \"list1\": {\"type\": \"values\", \"data\": [200, 202, 303, 400, 404, 500]},\n  \"shorthand_list\":  [200, 202, 303, 400, 404, 500],\n  \"random_pet?sample=true\": [\"dog\", \"cat\", \"bunny\", \"pig\", \"rhino\", \"hedgehog\"]\n}",
      "yaml": "---\nlist1:\n  type: values\n  data: [200, 202, 303, 400, 404, 500]\nshorthand_list: [200, 202, 303, 400, 404, 500]\nrandom_pet?sample=true: [dog, cat, bunny, pig, rhino, hedgehog]",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.values('list1', [200, 202, 303, 400, 404, 500])\nspec_builder.add_field(\"shorthand_list\",  [200, 202, 303, 400, 404, 500])\nspec_builder.add_field(\"random_pet?sample=true\", [\"dog\", \"cat\", \"bunny\", \"pig\", \"rhino\", \"hedgehog\"])\n\nspec = spec_builder.build()"
    },
    "weighted_values_example_one": {
      "json": "{\n  \"weighted1\": {\n    \"type\": \"values\",\n    \"data\": {\n      \"200\": 0.4, \"202\": 0.3, \"303\": 0.1,\n      \"400\": 0.05, \"403\": 0.05, \"404\": 0.05, \"500\": 0.05\n    }\n  },\n  \"shorthand_weighted\": {\n    \"200\": 0.4, \"202\": 0.3, \"303\": 0.1,\n    \"400\": 0.05, \"403\": 0.05, \"404\": 0.05, \"500\": 0.05\n  }\n}",
      "yaml": "---\nweighted1:\n  type: values\n  data:\n    '200': 0.4\n    '202': 0.3\n    '303': 0.1\n    '400': 0.05\n    '403': 0.05\n    '404': 0.05\n    '500': 0.05\nshorthand_weighted:\n  '200': 0.4\n  '202': 0.3\n  '303': 0.1\n  '400': 0.05\n  '403': 0.05\n  '404': 0.05\n  '500': 0.05",
      "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.values('weighted1', {\n    \"200\": 0.4, \"202\": 0.3, \"303\": 0.1,\n    \"400\": 0.05, \"403\": 0.05, \"404\": 0.05, \"500\": 0.05\n}\n                    )\nspec_builder.add_field(\"shorthand_weighted\", {\n    \"200\": 0.4, \"202\": 0.3, \"303\": 0.1,\n    \"400\": 0.05, \"403\": 0.05, \"404\": 0.05, \"500\": 0.05\n})\n\nspec = spec_builder.build()"
    },
    "sample_mode_example_one": {
      "json": "{\n  \"combine\": {\"type\": \"combine\", \"refs\": [\"ONE\", \"TWO\"]},\n  \"refs\": {\n    \"ONE?sample=true\": [\"A\", \"B\", \"C\"],\n    \"TWO?sample=true\": [1, 2, 3]\n  }\n}",
      "yaml": "---\ncombine:\n  type: combine\n  refs:\n  - ONE\n  - TWO\nrefs:\n  ONE?sample=true: [A, B, C]\n  TWO?sample=true: [1, 2, 3]"
    },
    "combine_spec_example_one": {
      "json": "{\n  \"full name\": {\n    \"type\": \"combine\",\n    \"refs\": [\"first\", \"last\"],\n    \"config\": {\"join_with\": \" \"}\n  },\n  \"refs\": {\n    \"first\": {\n      \"type\": \"values\",\n      \"data\": [\"zebra\", \"hedgehog\", \"llama\", \"flamingo\"]\n    },\n    \"last\": {\n      \"type\": \"values\",\n      \"data\": [\"jones\", \"smith\", \"williams\"]\n    }\n  }\n}",
      "yaml": "---\nfull name:\n  type: combine\n  refs:\n  - first\n  - last\n  config:\n    join_with: ' '\nrefs:\n  first:\n    type: values\n    data: [zebra, hedgehog, llama, flamingo]\n  last:\n    type: values\n    data: [jones, smith, williams]"
    },
    "combine_list_spec_example_one": {
      "json": "{\n  \"full name\": {\n    \"type\": \"combine-list\",\n    \"refs\": [\n      [\"first\", \"last\"],\n      [\"first\", \"middle\", \"last\"],\n      [\"first\", \"middle_initial\", \"last\"]\n    ],\n    \"config\": {\"join_with\": \" \"}\n  },\n  \"refs\": {\n    \"first\": [\"zebra\", \"hedgehog\", \"llama\", \"flamingo\"],\n    \"last\": [\"jones\", \"smith\", \"williams\"],\n    \"middle\": [\"cloud\", \"sage\", \"river\"],\n    \"middle_initial\": {\"a\": 0.3, \"m\": 0.3, \"j\": 0.1, \"l\": 0.1, \"e\": 0.1, \"w\": 0.1}\n  }\n}",
      "yaml": "---\nfull name:\n  type: combine-list\n  refs: [\n    [first, last],\n    [first, middle, last],\n    [first, middle_initial, last]\n  ]\n  config:\n    join_with: ' '\nrefs:\n  first: [zebra, hedgehog, llama, flamingo]\n  last: [jones, smith, williams]\n  middle: [cloud, sage, river]\n  middle_initial:\n    a: 0.3\n    m: 0.3\n    j: 0.1\n    l: 0.1\n    e: 0.1\n    w: 0.1"
    },
    "uniform_date_example_exhaustive": {
        "description": "Generate dates uniformly over a 90 period starting at 15 Dec 2050 12:00 PM, and formats with Hours and Minutes and Month as abbreviated name.",
        "json": "{\"dates:date?duration_days=90&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\": {}}",
        "yaml": "dates:date?duration_days=90&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M: {}",
        "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?duration_days=90&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\", {})\n\nspec = spec_builder.build()",
        "command": "dataspec --inline '{\"dates:date?duration_days=90&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\": {}}' -i 1000 --log-level error \\\n  | sort -t- -k3n -k2M -k1n | uniq | sed -n '1p;$p'",
        "output": "15-Dec-2050 16:04\n15-Mar-2051 11:25"
    },
    "uniform_date_example_one": {
        "description": "Generate dates uniformly over a 30 day range starting at today",
        "json": "{\"dates:date\": {}}",
        "yaml": "dates:date: {}",
        "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date\", {})\n\nspec = spec_builder.build()",
        "command": "dataspec --inline '{\"dates:date\": {}}' --log-level error \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
        "output": "15-01-2050 \n13-02-2050"
    },
    "uniform_date_example_two": {
        "description": "Generate dates uniformly over a 30 day range starting at yesterday",
        "json": "{\"dates:date?offset=1\": {}}",
        "yaml": "dates:date?offset=1: {}",
        "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?offset=1\", {})\n\nspec = spec_builder.build()",
        "command": "dataspec --inline '{\"dates:date?offset=1\": {}}' --log-level error \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
        "output": "14-01-2050 \n12-02-2050"
    },
    "uniform_date_example_three": {
        "description": "Generate dates uniformly over a 24 hour (1 day) period starting at today",
        "json": "{\"dates:date?duration_days=1\": {}}",
        "yaml": "dates:date?duration_days=1: {}",
        "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?duration_days=1\", {})\n\nspec = spec_builder.build()",
        "command": "dataspec --inline '{\"dates:date?duration_days=1\": {}}' --log-level error \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
        "output": "15-01-2050 \n16-01-2050"
    },
    "uniform_date_example_four": {
        "description": "Generate dates uniformly over a 10 day period  starting at today",
        "json": "{\"dates:date?duration_days=10\": {}}",
        "yaml": "dates:date?duration_days=10: {}",
        "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?duration_days=10\", {})\n\nspec = spec_builder.build()",
        "command": "dataspec --inline '{\"dates:date?duration_days=10\": {}}' --log-level error \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
        "output": "15-01-2050 \n25-01-2050"
    },
    "uniform_date_example_five": {
        "description": "Generate dates uniformly over a 24 hour (1 day) period starting at yesterday",
        "json": "{\"dates:date?duration_days=1&offset=1\": {}}",
        "yaml": "dates:date?duration_days=1&offset=1: {}",
        "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?duration_days=1&offset=1\", {})\n\nspec = spec_builder.build()",
        "command": "dataspec --inline '{\"dates:date?duration_days=1&offset=1\": {}}' --log-level error \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
        "output": "14-01-2050 \n15-01-2050"
    },
    "uniform_date_example_six": {
        "description": "Generate dates uniformly over a 24 hour (1 day) period starting at tomorrow",
        "json": "{\"dates:date?duration_days=1&offset=-1\": {}}",
        "yaml": "dates:date?duration_days=1&offset=-1: {}",
        "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?duration_days=1&offset=-1\", {})\n\nspec = spec_builder.build()",
        "command": "dataspec --inline '{\"dates:date?duration_days=1&offset=-1\": {}}' --log-level error \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
        "output": "16-01-2050 \n17-01-2050"
    },
    "uniform_date_example_seven": {
        "description": "Generate dates uniformly over a 24 hour (1 day) period starting at 14 Dec 2050",
        "json": "{\"dates:date?duration_days=1&offset=1&start=15-12-2050\": {}}",
        "yaml": "dates:date?duration_days=1&offset=1&start=15-12-2050: {}",
        "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?duration_days=1&offset=1&start=15-12-2050\", {})\n\nspec = spec_builder.build()",
        "command": "dataspec --inline '{\"dates:date?duration_days=1&offset=1&start=15-12-2050\": {}}' --log-level error \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
        "output": "14-12-2050\n14-12-2050"
    },
    "uniform_date_example_eight": {
        "description": "Generate dates uniformly over a 24 hour (1 day) period starting at 15 Dec 2050 12:00 PM, and formats with Hours and Minutes and Month as abbreviated name.",
        "json": "{\"dates:date?duration_days=1&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\": {}}",
        "yaml": "dates:date?duration_days=1&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M: {}",
        "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?duration_days=1&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\", {})\n\nspec = spec_builder.build()",
        "command": "dataspec --inline '{\"dates:date?duration_days=1&start=15-Dec-2050 12:00&format=%d-%b-%Y %H:%M\": {}}' --log-level error \\\n  | sort -t- -k3n -k2M -k1n | uniq | sed -n '1p;$p'",
        "output": "15-Dec-2050 12:04\n16-Dec-2050 11:46"
    },
    "centered_date_example_exhaustive": {
        "description": "Generate dates with a normal distribution over a 24 hour (1 day) period centered at 01 Jun 2050 12:00 PM with a standard deviation of 2 days. Formats with YearMonthDay Hour:Minute.",
        "json": "{\"dates:date?center_date=20500601 12:00&format=%Y%m%d %H:%M&stddev_days=2\": {}}",
        "yaml": "dates:date?center_date=20500601 12:00&format=%Y%m%d %H:%M&stddev_days=2: {}",
        "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?center_date=20500601 12:00&format=%Y%m%d %H:%M&stddev_days=2\", {})\n\nspec = spec_builder.build()",
        "command": "dataspec --inline '{\"dates:date?center_date=20500601 12:00&format=%Y%m%d %H:%M&stddev_days=2\": {}}' --log-level error \\\n  | sort -n | uniq | sed -n '1p;$p'",
        "output": "20500528 07:11\n20500606 16:27"
    },
    "centered_date_example_one": {
        "description": "Generate dates centered at today with most +- 1 day, but some +- more than that.",
        "json": "{\"dates:date?stddev_days=1\": {}}",
        "yaml": "dates:date?stddev_days=1: {}",
        "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?stddev_days=1\", {})\n\nspec = spec_builder.build()",
        "command": "dataspec --inline '{\"dates:date?stddev_days=1\": {}}' --log-level error \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
        "output": "12-01-2050 \n17-01-2050"
    },
    "centered_date_example_two": {
        "description": "Generate dates centered at today with most +- 15 days, but some +- more than that.",
        "json": "{\"dates:date?stddev_days=15\": {}}",
        "yaml": "dates:date?stddev_days=15: {}",
        "api": "import dataspec\n\nspec_builder = dataspec.spec_builder()\n\nspec_builder.add_field(\"dates:date?stddev_days=15\", {})\n\nspec = spec_builder.build()",
        "command": "dataspec --inline '{\"dates:date?stddev_days=15\": {}}' --log-level error \\\n  | sort -t- -k3n -k2n -k1n | uniq | sed -n '1p;$p'",
        "output": "17-12-2049 \n14-02-2050"
    },
    "range_spec_example_one": {
      "json": "{\n  \"zero_to_ten\": {\n    \"type\": \"range\",\n    \"data\": [0, 10, 0.5]\n  },\n  \"range_shorthand1:range\": {\"data\": [0, 10, 0.5]},\n  \"range_shorthand2:range\": [0, 10, 0.5]\n}",
      "yaml": "---\nrange_shorthand1:range:\n  data:\n  - 0\n  - 10\n  - 0.5\nrange_shorthand2:range:\n- 0\n- 10\n- 0.5\nzero_to_ten:\n  data:\n  - 0\n  - 10\n  - 0.5\n  type: range"
    },
    "range_spec_example_two": {
      "json": "{\n  \"salaries\": {\n    \"type\": \"range\",\n    \"data\": [\n      [1000, 10000, 1000],\n      [10000, 55000, 5000],\n      [55000, 155000, 10000]\n    ]\n  }\n}",
      "yaml": "---\nsalaries:\n  type: range\n  data: [\n    [1000, 10000, 1000],\n    [10000, 55000, 5000],\n    [55000, 155000, 10000]\n  ]"
    },
    "rand_range_spec_example_one": {
      "json": "{\n  \"population\": {\n    \"type\": \"rand_range\",\n    \"data\": [100, 1000],\n    \"config\": {\"cast\": \"int\"}\n  },\n  \"pop:rand_range?cast=f\": [200.2, 1222.7, 2]\n}",
      "yaml": "---\npopulation:\n  type: rand_range\n  data: [100, 1000]\n  config:\n    cast: int\npop:rand_range?cast=f: [200.2, 1222.7, 2]"
    },
    "uuid_spec_example_one": {
      "json": "{\n  \"id\": {\n    \"type\": \"uuid\"\n  },\n  \"id_shorthand:uuid\": {}\n}",
      "yaml": "---\nid:\n  type: uuid\nid_shorthand:uuid: {}"
    },
    "geo_point_spec_example_one": {
      "json": "{\n  \"egypt\": {\n    \"type\": \"geo.point\",\n    \"config\": {\n      \"bbox\": [31.33134, 22.03795, 34.19295, 25.00562],\n      \"precision\": 3\n    }\n  }\n}",
      "yaml": "---\negypt:\n  type: geo.point\n  config:\n    bbox:\n    - 31.33134\n    - 22.03795\n    - 34.19295\n    - 25.00562\n    precision: 3"
    },
    "ip_spec_example_one": {
      "json": "{\n  \"network\": {\n    \"type\": \"ipv4\",\n    \"config\": {\n      \"cidr\": \"2.22.222.0/16\"\n    }\n  },\n  \"network_shorthand:ip?cidr=2.22.222.0/16\": {},\n  \"network_with_base:ip?base=192.168.0\": {}\n}",
      "yaml": "---\nnetwork:\n  type: ipv4\n  config:\n    cidr: 2.22.222.0/16\nnetwork_shorthand:ip?cidr=2.22.222.0/16: {}\nnetwork_with_base:ip?base=192.168.0: {}"
    },
    "ip_precise_example_one": {
      "json": "{\"network:ip.precise?cidr=10.0.0.0/8\":{}}",
      "yaml": "---\nnetwork:ip.precise?cidr=10.0.0.0/8: {}"
    },
    "ip_precise_example_two": {
      "json": "{\"network:ip.precise?cidr=192.168.0.0/14&sample=true\": {}}",
      "yaml": "---\nnetwork:ip.precise?cidr=192.168.0.0/14&sample=true: {}"
    },
    "ip_precise_example_three": {
      "json": "{\"network:ip.precise?cidr=2.22.222.0/22\": {}}",
      "yaml": "---\nnetwork:ip.precise?cidr=2.22.222.0/22: {}"
    },
    "weighted_ref_example_one": {
      "json": "{\n  \"http_code\": {\n    \"type\": \"weightedref\",\n    \"data\": {\n      \"GOOD_CODES\": 0.7,\n      \"BAD_CODES\": 0.3\n    }\n  },\n  \"refs\": {\n    \"GOOD_CODES\": {\"200\": 0.5, \"202\": 0.3, \"203\": 0.1, \"300\": 0.1},\n    \"BAD_CODES\": {\"400\": 0.5, \"403\": 0.3, \"404\": 0.1, \"500\": 0.1}\n  }\n}",
      "yaml": "---\nhttp_code:\n  type: weightedref\n  data:\n    GOOD_CODES: 0.7\n    BAD_CODES: 0.3\nrefs:\n  BAD_CODES:\n    '400': 0.5\n    '403': 0.3\n    '404': 0.1\n    '500': 0.1\n  GOOD_CODES:\n    '200': 0.5\n    '202': 0.3\n    '203': 0.1\n    '300': 0.1"
    },
    "select_list_example_one": {
      "json": "{\n  \"ingredients\": {\n    \"type\": \"select_list_subset\",\n    \"config\": {\n      \"mean\": 3,\n      \"stddev\": 1,\n      \"min\": 2,\n      \"max\": 4,\n      \"join_with\": \", \"\n    },\n    \"data\": [\"onions\", \"mushrooms\", \"garlic\", \"bell peppers\", \"spinach\", \"potatoes\", \"carrots\"]\n  }\n}",
      "yaml": "---\ningredients:\n  config:\n    join_with: ', '\n    max: 4\n    mean: 3\n    min: 2\n    stddev: 1\n  data:\n  - onions\n  - mushrooms\n  - garlic\n  - bell peppers\n  - spinach\n  - potatoes\n  - carrots\n  type: select_list_subset"
    },
    "select_list_example_two": {
      "json": "{\n  \"ingredients\": {\n    \"type\": \"select_list_subset\",\n    \"config\": {\n      \"mean\": 3, \"stddev\": 1, \"min\": 2, \"max\": 4,\n      \"join_with\": \"\\\", \\\"\",\n      \"quote\": \"\\\"\"\n    },\n    \"data\": [\"onions\", \"mushrooms\", \"garlic\", \"bell peppers\", \"spinach\", \"potatoes\", \"carrots\"]\n  }\n}",
      "yaml": "---\ningredients:\n  type: select_list_subset\n  config:\n    join_with: '\", \"'\n    mean: 3\n    stddev: 1\n    min: 2\n    max: 4\n    quote: '\"'\n  data:\n  - onions\n  - mushrooms\n  - garlic\n  - bell peppers\n  - spinach\n  - potatoes\n  - carrots"
    },
    "csv_spec_example_one": {
      "json": "{\n  \"cities\": {\n    \"type\": \"csv\",\n    \"config\": {\n      \"datafile\": \"cities.csv\",\n      \"delimiter\": \"~\",\n      \"sample\": true\n    }\n  }\n}",
      "yaml": "---\ncities:\n  type: csv\n  config:\n    datafile: cities.csv\n    delimiter: '~'\n    sample: true"
    },
    "csv_spec_example_two": {
      "json": "{\n    \"status\": {\n        \"type\": \"csv\",\n        \"config\": {\n            \"configref\": \"tabs_config\",\n            \"column\": 1\n        }\n    },\n    \"description\": {\n        \"type\": \"csv\",\n        \"config\": {\n            \"configref\": \"tabs_config\",\n            \"column\": 2\n        }\n    },\n    \"status_type:csv?configref=tabs_config&column=3\": {},\n    \"refs\": {\n        \"tabs_config\": {\n            \"type\": \"configref\",\n            \"config\": {\n                \"datafile\": \"tabs.csv\",\n                \"delimiter\": \"\\\\t\",\n                \"headers\": true\n            }\n        }\n    }\n}",
      "yaml": "---\nstatus:\n  type: csv\n  config:\n    configref: tabs_config\n    column: 1\ndescription:\n  type: csv\n  config:\n    configref: tabs_config\n    column: 2\n# shorthand notation\nstatus_type:csv?configref=tabs_config&column=3: { }\nrefs:\n  tabs_config:\n    type: configref\n    config:\n      datafile: tabs.csv\n      delimiter: '\\t'\n      headers: true"
    },
    "csv_select_example_one": {
      "json": "{\n    \"placeholder\": {\n        \"type\": \"csv_select\",\n        \"data\": {\n            \"geonameid\": 1,\n            \"name\": 2,\n            \"latitude\": 5,\n            \"longitude\": 6,\n            \"country_code\": 9,\n            \"population\": 15\n        },\n        \"config\": {\n            \"datafile\": \"allCountries.txt\",\n            \"headers\": false,\n            \"delimiter\": \"\\t\"\n        }\n    }\n}",
      "yaml": "---\nplaceholder:\n  type: csv_select\n  data:\n    geonameid: 1\n    name: 2\n    latitude: 5\n    longitude: 6\n    country_code: 9\n    population: 15\n  config:\n    datafile: allCountries.txt\n    headers: no\n    delimiter: \"\\t\""
    },
    "nested_example_one": {
      "json": "{\n  \"id:uuid\": {},\n  \"user:nested\": {\n    \"fields\": {\n      \"user_id:uuid\": {},\n      \"geo:nested\": {\n        \"fields\": {\n          \"place_id:cc-digits?mean=5\": {},\n          \"coordinates:geo.pair?as_list=true\": {}\n        }\n      }\n    }\n  }\n}",
      "yaml": "id:uuid: {}\nuser:nested:\n  fields:\n    user_id:uuid: {}\n    geo:nested:\n      fields:\n        place_id:cc-digits?mean=5: {}\n        coordinates:geo.pair?as_list=true: {}",
      "command": "dataspec -s double-nested.json -i 1 --format json-pretty -x",
      "output": "{\n    \"id\": \"4278b060-442d-4558-bf2c-5f1df68cb265\",\n    \"user\": {\n        \"geo\": {\n            \"coordinates\": [\n                \"-167.4324\",\n                \" 84.6883\"\n            ],\n            \"place_id\": \"42018569\"\n        },\n        \"user_id\": \"13d5c2a6-80c8-4bdb-89b2-7da9699cd0fb\"\n    }\n} "
    },
    "char_class_spec_example_one": {
      "json": "{\n  \"one_to_five_digits:cc-digits?min=1&max=5\": {}\n}",
      "yaml": "one_to_five_digits:cc-digits?min=1&max=5: {}"
    },
    "char_class_spec_example_two": {
      "json": "{\n  \"password\": {\n    \"type\": \"char_class\",\n    \"data\": [\n      \"word\",\n      \"special\",\n      \"hex-lower\",\n      \"M4$p3c!@l$@uc3\"\n    ],\n    \"config\": {\n      \"mean\": 14,\n      \"stddev\": 2,\n      \"min\": 10,\n      \"max\": 18,\n      \"exclude\": [\"'\", \"\\\"\"]\n    }\n  }\n}",
      "yaml": "---\npassword:\n  type: char_class\n  data:\n  - word\n  - special\n  - hex-lower\n  - M4$p3c!@l$@uc3\n  config:\n    mean: 14\n    stddev: 2\n    min: 10\n    max: 18\n    exclude: ['''', '\"']",
      "command": "dataspec -s password.json -i 10",
      "output": "61Nl=U35LVY^*\npe576Z*P198&f4t\n1p}=HA9b?iJDc\n7$C])[o<BDh&W9kz\nF%iGot-j~eUfpT3qR\n(TM9b$o$A4KG*{&\n{WPm1;]O:w@y27l\\\nJeTmpZ@zYN2Ms3,\n96i@FPA$^Q#%(|7Cba\nQ=+6D*8I36R%<n`$8"
    },
    "unicode_range_example_one": {
      "json": "{\n  \"text\": {\n    \"type\": \"unicode_range\",\n    \"data\": [\"3040\", \"309f\"],\n    \"config\": {\n      \"mean\": 5\n    }\n  }\n}",
      "yaml": "text:\n  type: unicode_range\n  data: ['3040', '309f']\n  config:\n    mean: 5\n",
      "command": "dataspec -s unicode.yaml -i 10 -l off",
      "output": "そぬをく\nが\nとしぶ\nぉけべ゙\nゃれげえ\nっぴ\nつざめよがぽ\nえろぱづゖごそ\u3040べかっ\nい\u3098\nぱまる"
    },
    "count_dist_example_one": {
      "json": "{\n  \"field\": {\n    \"type\": \"char_class\",\n    \"data\": \"visible\",\n    \"config\": {\n      \"count_dist\": \"normal(mean=5, stddev=2, min=1, max=9)\"\n    }\n  }\n}",
      "yaml": "field:\n  type: char_class\n  data: visible\n  config:\n    count_dist: normal(mean=5, stddev=2, min=1, max=9)",
      "api": "import dataspec\n\nbuilder = dataspec.spec_builder()\n\nbuilder.char_class(key='field',\n                   data='visible',\n                   count_dist='normal(mean=5, stddev=2, min=1, max=9)')\n\nspec = builder.build()",
      "command": "dataspec --inline '{\"field\": {\"type\": \"char_class\", \"data\": \"visible\", \"config\": {\"count_dist\": \"normal(mean=5, stddev=2, min=1, max=9)\"}}}' --log-level error -i 5",
      "output": ";7~(\noSk\n5L\n#8`}H\n~F>Ey"
    }
  }
}
